import { type User, type InsertUser, type Message, type InsertMessage } from "@shared/schema";
import session from "express-session";
import createMemoryStore from "memorystore";

const MemoryStore = createMemoryStore(session);

export interface IStorage {
  // User operations
  getUser(id: number): Promise<User | undefined>;
  getUserByUsername(username: string): Promise<User | undefined>;
  createUser(user: InsertUser): Promise<User>;
  getAllUsers(): Promise<User[]>;
  
  // Message operations
  createMessage(message: InsertMessage): Promise<Message>;
  getMessages(limit?: number): Promise<Message[]>;
  
  // Session store
  sessionStore: session.Store;
}

// In-memory storage implementation
export class MemStorage implements IStorage {
  private users: User[] = [];
  private messages: Message[] = [];
  private nextUserId = 1;
  private nextMessageId = 1;
  public sessionStore: session.Store;
  
  constructor() {
    this.sessionStore = new MemoryStore({
      checkPeriod: 86400000, // 24h, prune expired entries
    });
  }
  
  async getUser(id: number): Promise<User | undefined> {
    return this.users.find(user => user.id === id);
  }
  
  async getUserByUsername(username: string): Promise<User | undefined> {
    return this.users.find(user => user.username === username);
  }
  
  async createUser(insertUser: InsertUser): Promise<User> {
    const newUser: User = {
      ...insertUser,
      id: this.nextUserId++
    };
    this.users.push(newUser);
    return newUser;
  }
  
  async getAllUsers(): Promise<User[]> {
    return [...this.users];
  }
  
  async createMessage(insertMessage: InsertMessage): Promise<Message> {
    const newMessage: Message = {
      ...insertMessage,
      id: this.nextMessageId++,
      timestamp: new Date()
    };
    this.messages.push(newMessage);
    return newMessage;
  }
  
  async getMessages(limit?: number): Promise<Message[]> {
    // Sort messages by timestamp in descending order (newest first)
    const sortedMessages = [...this.messages].sort(
      (a, b) => b.timestamp.getTime() - a.timestamp.getTime()
    );
    
    if (limit) {
      return sortedMessages.slice(0, limit);
    }
    
    return sortedMessages;
  }
}

export const storage = new MemStorage();